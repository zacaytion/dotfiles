require('babel-polyfill');
const child_process = require('child_process');
const _vscodeJsonrpc = require('vscode-jsonrpc');
const path = require('path');
const fs = require('fs');
const service = require('graphql-language-service-server');
const babylon = require('babylon');
const traverse = require('babel-traverse');

/*
const query =
'let fn = arg => console.log(arg);\n' +
'const query = graphql`' +
'  query test { name }' +
'`;';

const ast = babylon.parse(query);
traverse.default(ast, {
  TaggedTemplateExpression(path) {
    console.log(path.node.quasi);
    const quasi = path.node.quasi;
    console.log(query.substring(quasi.start, quasi.end));
  }
});

service.handleDidOpenOrSaveNotification({
  textDocument: {
    text: query
  }
}).then(function (data) {
  console.log(data);
});
const url = require('url');

let test;
test = url.parse('/data/users/ljw/ljwww/Clio.php');
test = url.parse('file://localhost/C|/NETLOG.TXT');
test = url.parse('file:///etc/motd');
test = url.parse('nuclide:///nuclide-uri'); // ??? whatever a nuclide URI looks like
test = url.parse('http://www.google.com'); //?? some kind of http URI
test = url.parse('');
test = url.parse('file://a/b?query=something');

console.log(test);
*/

const proc = child_process.fork(
  path.join(process.cwd(), 'graphql.js'),
  ['server', '--method', 'stream'],
  { silent: true }
);

const writer = new _vscodeJsonrpc.StreamMessageWriter(proc.stdin);

proc.stdin.setEncoding('utf8');
proc.stdout.setEncoding('utf8');

proc.stdout.on('data', d => {
  console.log('data from stdout');
  console.log(d);
});
proc.stdout.on('error', d => {
  console.log('error from stdout');
  console.log(d);
});
proc.stdin.on('error', e => {
  console.log('error from stdin');
  console.log(e);
});

writer.write({
  jsonrpc: '2.0',
  id: 0,
  method: 'initialize',
  params: {
    'rootPath': '/Users/asiandrummer/fbsource/xplat/js/RKJSModules/'
  },
});

const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

rl.question('Enter? ', function (answer) {
  const testPath = '/Users/asiandrummer/fbsource/xplat/js/RKJSModules/Apps/Oculus/store/OCAppListItem.js';
  const text = fs.readFileSync(testPath, 'utf8');

  writer.write({
    jsonrpc: '2.0',
    method: 'textDocument/didOpen',
    params: {
      'textDocument': {
        'uri': testPath,
        'text': text,
      }
    }
  });
  rl.close();
});

/*
*/
