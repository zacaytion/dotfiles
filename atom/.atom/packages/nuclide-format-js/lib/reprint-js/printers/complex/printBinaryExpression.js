function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 *
 * 
 */

var _constantsMarkers = require('../../constants/markers');

var _constantsMarkers2 = _interopRequireDefault(_constantsMarkers);

var _wrappersSimpleWrapExpression = require('../../wrappers/simple/wrapExpression');

var _wrappersSimpleWrapExpression2 = _interopRequireDefault(_wrappersSimpleWrapExpression);

function printBinaryExpression(print, node, context) {
  var path = context.path;
  var needsScope = true;
  for (var i = path.size - 1; i >= 0; i--) {
    var curr = path.get(i);
    /**
     * Traverse the path until we see the first logical expression. If it has
     * the same kind of operator we do not need to open a new scope. If it has
     * a different kind of operator we force it into a new scope.
     */
    if (curr.type === 'BinaryExpression') {
      needsScope = curr.operator !== node.operator;
      break;
    }
  }

  var wrap = function wrap(x) {
    return (0, _wrappersSimpleWrapExpression2['default'])(print, node, x);
  };
  return wrap([needsScope ? [_constantsMarkers2['default'].openScope, _constantsMarkers2['default'].scopeIndent, _constantsMarkers2['default'].scopeBreak] : _constantsMarkers2['default'].empty, print(node.left), _constantsMarkers2['default'].noBreak, _constantsMarkers2['default'].space, node.operator, _constantsMarkers2['default'].scopeSpaceBreak, print(node.right), needsScope ? [_constantsMarkers2['default'].scopeBreak, _constantsMarkers2['default'].scopeDedent, _constantsMarkers2['default'].closeScope] : _constantsMarkers2['default'].empty]);
}

module.exports = printBinaryExpression;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9yZXByaW50LWpzL3ByaW50ZXJzL2NvbXBsZXgvcHJpbnRCaW5hcnlFeHByZXNzaW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztnQ0Fhb0IseUJBQXlCOzs7OzRDQUNsQixzQ0FBc0M7Ozs7QUFFakUsU0FBUyxxQkFBcUIsQ0FDNUIsS0FBWSxFQUNaLElBQXNCLEVBQ3RCLE9BQWdCLEVBQ1Q7QUFDUCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQzFCLE1BQUksVUFBVSxHQUFHLElBQUksQ0FBQztBQUN0QixPQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdkMsUUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Ozs7O0FBTXpCLFFBQUksSUFBSSxDQUFDLElBQUksS0FBSyxrQkFBa0IsRUFBRTtBQUNwQyxnQkFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUM3QyxZQUFNO0tBQ1A7R0FDRjs7QUFFRCxNQUFNLElBQUksR0FBRyxTQUFQLElBQUksQ0FBRyxDQUFDO1dBQUksK0NBQWUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FBQSxDQUFDO0FBQ2pELFNBQU8sSUFBSSxDQUFDLENBQ1YsVUFBVSxHQUNOLENBQUMsOEJBQVEsU0FBUyxFQUFFLDhCQUFRLFdBQVcsRUFBRSw4QkFBUSxVQUFVLENBQUMsR0FDNUQsOEJBQVEsS0FBSyxFQUNqQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUNoQiw4QkFBUSxPQUFPLEVBQ2YsOEJBQVEsS0FBSyxFQUNiLElBQUksQ0FBQyxRQUFRLEVBQ2IsOEJBQVEsZUFBZSxFQUN2QixLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUNqQixVQUFVLEdBQ04sQ0FBQyw4QkFBUSxVQUFVLEVBQUUsOEJBQVEsV0FBVyxFQUFFLDhCQUFRLFVBQVUsQ0FBQyxHQUM3RCw4QkFBUSxLQUFLLENBQ2xCLENBQUMsQ0FBQztDQUNKOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcscUJBQXFCLENBQUMiLCJmaWxlIjoicHJpbnRCaW5hcnlFeHByZXNzaW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHR5cGUge0JpbmFyeUV4cHJlc3Npb259IGZyb20gJ2FzdC10eXBlcy1mbG93JztcbmltcG9ydCB0eXBlIHtDb250ZXh0LCBMaW5lcywgUHJpbnR9IGZyb20gJy4uLy4uL3R5cGVzL2NvbW1vbic7XG5cbmltcG9ydCBtYXJrZXJzIGZyb20gJy4uLy4uL2NvbnN0YW50cy9tYXJrZXJzJztcbmltcG9ydCB3cmFwRXhwcmVzc2lvbiBmcm9tICcuLi8uLi93cmFwcGVycy9zaW1wbGUvd3JhcEV4cHJlc3Npb24nO1xuXG5mdW5jdGlvbiBwcmludEJpbmFyeUV4cHJlc3Npb24oXG4gIHByaW50OiBQcmludCxcbiAgbm9kZTogQmluYXJ5RXhwcmVzc2lvbixcbiAgY29udGV4dDogQ29udGV4dCxcbik6IExpbmVzIHtcbiAgY29uc3QgcGF0aCA9IGNvbnRleHQucGF0aDtcbiAgbGV0IG5lZWRzU2NvcGUgPSB0cnVlO1xuICBmb3IgKGxldCBpID0gcGF0aC5zaXplIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBjb25zdCBjdXJyID0gcGF0aC5nZXQoaSk7XG4gICAgLyoqXG4gICAgICogVHJhdmVyc2UgdGhlIHBhdGggdW50aWwgd2Ugc2VlIHRoZSBmaXJzdCBsb2dpY2FsIGV4cHJlc3Npb24uIElmIGl0IGhhc1xuICAgICAqIHRoZSBzYW1lIGtpbmQgb2Ygb3BlcmF0b3Igd2UgZG8gbm90IG5lZWQgdG8gb3BlbiBhIG5ldyBzY29wZS4gSWYgaXQgaGFzXG4gICAgICogYSBkaWZmZXJlbnQga2luZCBvZiBvcGVyYXRvciB3ZSBmb3JjZSBpdCBpbnRvIGEgbmV3IHNjb3BlLlxuICAgICAqL1xuICAgIGlmIChjdXJyLnR5cGUgPT09ICdCaW5hcnlFeHByZXNzaW9uJykge1xuICAgICAgbmVlZHNTY29wZSA9IGN1cnIub3BlcmF0b3IgIT09IG5vZGUub3BlcmF0b3I7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBjb25zdCB3cmFwID0geCA9PiB3cmFwRXhwcmVzc2lvbihwcmludCwgbm9kZSwgeCk7XG4gIHJldHVybiB3cmFwKFtcbiAgICBuZWVkc1Njb3BlXG4gICAgICA/IFttYXJrZXJzLm9wZW5TY29wZSwgbWFya2Vycy5zY29wZUluZGVudCwgbWFya2Vycy5zY29wZUJyZWFrXVxuICAgICAgOiBtYXJrZXJzLmVtcHR5LFxuICAgIHByaW50KG5vZGUubGVmdCksXG4gICAgbWFya2Vycy5ub0JyZWFrLFxuICAgIG1hcmtlcnMuc3BhY2UsXG4gICAgbm9kZS5vcGVyYXRvcixcbiAgICBtYXJrZXJzLnNjb3BlU3BhY2VCcmVhayxcbiAgICBwcmludChub2RlLnJpZ2h0KSxcbiAgICBuZWVkc1Njb3BlXG4gICAgICA/IFttYXJrZXJzLnNjb3BlQnJlYWssIG1hcmtlcnMuc2NvcGVEZWRlbnQsIG1hcmtlcnMuY2xvc2VTY29wZV1cbiAgICAgIDogbWFya2Vycy5lbXB0eSxcbiAgXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJpbnRCaW5hcnlFeHByZXNzaW9uO1xuIl19