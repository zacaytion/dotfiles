function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 *
 * 
 */

var _constantsMarkers = require('../../constants/markers');

var _constantsMarkers2 = _interopRequireDefault(_constantsMarkers);

var _commonPrintCommaSeparatedNodes = require('../common/printCommaSeparatedNodes');

var _commonPrintCommaSeparatedNodes2 = _interopRequireDefault(_commonPrintCommaSeparatedNodes);

var _wrappersSimpleWrapExpression = require('../../wrappers/simple/wrapExpression');

var _wrappersSimpleWrapExpression2 = _interopRequireDefault(_wrappersSimpleWrapExpression);

function printFunctionExpression(print, node, context) {
  var wrap = function wrap(x) {
    return (0, _wrappersSimpleWrapExpression2['default'])(print, node, x);
  };
  var last = context.path.last();

  var parts = [];
  if (last && last.type === 'MethodDefinition') {
    // Method definitions don't have the function keyword.
  } else if (last && last.type === 'Property' && last.method) {
      // Properties that are methods don't use the function keyword.
    } else {
        parts = parts.concat([node.async ? ['async', _constantsMarkers2['default'].space, _constantsMarkers2['default'].noBreak] : _constantsMarkers2['default'].empty, 'function', node.generator ? '*' : _constantsMarkers2['default'].empty, _constantsMarkers2['default'].noBreak]);
      }

  if (node.id) {
    var id = node.id;
    parts = parts.concat([_constantsMarkers2['default'].space, print(id)]);
  }

  parts = parts.concat([node.typeParameters ? [_constantsMarkers2['default'].noBreak, print(node.typeParameters)] : _constantsMarkers2['default'].empty, _constantsMarkers2['default'].noBreak, '(', (0, _commonPrintCommaSeparatedNodes2['default'])(print, node.params), ')', node.returnType ? print(node.returnType) : _constantsMarkers2['default'].empty, _constantsMarkers2['default'].space, print(node.body),
  // This is to squash any breaks from the body.
  _constantsMarkers2['default'].noBreak, '']);

  return wrap(parts);
}

module.exports = printFunctionExpression;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9yZXByaW50LWpzL3ByaW50ZXJzL2NvbXBsZXgvcHJpbnRGdW5jdGlvbkV4cHJlc3Npb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O2dDQWFvQix5QkFBeUI7Ozs7OENBQ1Isb0NBQW9DOzs7OzRDQUM5QyxzQ0FBc0M7Ozs7QUFFakUsU0FBUyx1QkFBdUIsQ0FDOUIsS0FBWSxFQUNaLElBQXdCLEVBQ3hCLE9BQWdCLEVBQ1Q7QUFDUCxNQUFNLElBQUksR0FBRyxTQUFQLElBQUksQ0FBRyxDQUFDO1dBQUksK0NBQWUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7R0FBQSxDQUFDO0FBQ2pELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7O0FBRWpDLE1BQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNmLE1BQUksSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssa0JBQWtCLEVBQUU7O0dBRTdDLE1BQU0sSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxVQUFVLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTs7S0FFM0QsTUFBTTtBQUNMLGFBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxPQUFPLEVBQUUsOEJBQVEsS0FBSyxFQUFFLDhCQUFRLE9BQU8sQ0FBQyxHQUFHLDhCQUFRLEtBQUssRUFDdEUsVUFBVSxFQUNWLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHLDhCQUFRLEtBQUssRUFDcEMsOEJBQVEsT0FBTyxDQUNoQixDQUFDLENBQUM7T0FDSjs7QUFFRCxNQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7QUFDWCxRQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ25CLFNBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQ25CLDhCQUFRLEtBQUssRUFDYixLQUFLLENBQUMsRUFBRSxDQUFDLENBQ1YsQ0FBQyxDQUFDO0dBQ0o7O0FBRUQsT0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FDbkIsSUFBSSxDQUFDLGNBQWMsR0FDZixDQUFDLDhCQUFRLE9BQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQzdDLDhCQUFRLEtBQUssRUFDakIsOEJBQVEsT0FBTyxFQUNmLEdBQUcsRUFDSCxpREFBeUIsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFDNUMsR0FBRyxFQUNILElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyw4QkFBUSxLQUFLLEVBQ3hELDhCQUFRLEtBQUssRUFDYixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7QUFFaEIsZ0NBQVEsT0FBTyxFQUNmLEVBQUUsQ0FDSCxDQUFDLENBQUM7O0FBRUgsU0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDcEI7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyx1QkFBdUIsQ0FBQyIsImZpbGUiOiJwcmludEZ1bmN0aW9uRXhwcmVzc2lvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCB0eXBlIHtDb250ZXh0LCBMaW5lcywgUHJpbnR9IGZyb20gJy4uLy4uL3R5cGVzL2NvbW1vbic7XG5pbXBvcnQgdHlwZSB7RnVuY3Rpb25FeHByZXNzaW9ufSBmcm9tICdhc3QtdHlwZXMtZmxvdyc7XG5cbmltcG9ydCBtYXJrZXJzIGZyb20gJy4uLy4uL2NvbnN0YW50cy9tYXJrZXJzJztcbmltcG9ydCBwcmludENvbW1hU2VwYXJhdGVkTm9kZXMgZnJvbSAnLi4vY29tbW9uL3ByaW50Q29tbWFTZXBhcmF0ZWROb2Rlcyc7XG5pbXBvcnQgd3JhcEV4cHJlc3Npb24gZnJvbSAnLi4vLi4vd3JhcHBlcnMvc2ltcGxlL3dyYXBFeHByZXNzaW9uJztcblxuZnVuY3Rpb24gcHJpbnRGdW5jdGlvbkV4cHJlc3Npb24oXG4gIHByaW50OiBQcmludCxcbiAgbm9kZTogRnVuY3Rpb25FeHByZXNzaW9uLFxuICBjb250ZXh0OiBDb250ZXh0LFxuKTogTGluZXMge1xuICBjb25zdCB3cmFwID0geCA9PiB3cmFwRXhwcmVzc2lvbihwcmludCwgbm9kZSwgeCk7XG4gIGNvbnN0IGxhc3QgPSBjb250ZXh0LnBhdGgubGFzdCgpO1xuXG4gIGxldCBwYXJ0cyA9IFtdO1xuICBpZiAobGFzdCAmJiBsYXN0LnR5cGUgPT09ICdNZXRob2REZWZpbml0aW9uJykge1xuICAgIC8vIE1ldGhvZCBkZWZpbml0aW9ucyBkb24ndCBoYXZlIHRoZSBmdW5jdGlvbiBrZXl3b3JkLlxuICB9IGVsc2UgaWYgKGxhc3QgJiYgbGFzdC50eXBlID09PSAnUHJvcGVydHknICYmIGxhc3QubWV0aG9kKSB7XG4gICAgLy8gUHJvcGVydGllcyB0aGF0IGFyZSBtZXRob2RzIGRvbid0IHVzZSB0aGUgZnVuY3Rpb24ga2V5d29yZC5cbiAgfSBlbHNlIHtcbiAgICBwYXJ0cyA9IHBhcnRzLmNvbmNhdChbXG4gICAgICBub2RlLmFzeW5jID8gWydhc3luYycsIG1hcmtlcnMuc3BhY2UsIG1hcmtlcnMubm9CcmVha10gOiBtYXJrZXJzLmVtcHR5LFxuICAgICAgJ2Z1bmN0aW9uJyxcbiAgICAgIG5vZGUuZ2VuZXJhdG9yID8gJyonIDogbWFya2Vycy5lbXB0eSxcbiAgICAgIG1hcmtlcnMubm9CcmVhayxcbiAgICBdKTtcbiAgfVxuXG4gIGlmIChub2RlLmlkKSB7XG4gICAgY29uc3QgaWQgPSBub2RlLmlkO1xuICAgIHBhcnRzID0gcGFydHMuY29uY2F0KFtcbiAgICAgIG1hcmtlcnMuc3BhY2UsXG4gICAgICBwcmludChpZCksXG4gICAgXSk7XG4gIH1cblxuICBwYXJ0cyA9IHBhcnRzLmNvbmNhdChbXG4gICAgbm9kZS50eXBlUGFyYW1ldGVyc1xuICAgICAgPyBbbWFya2Vycy5ub0JyZWFrLCBwcmludChub2RlLnR5cGVQYXJhbWV0ZXJzKV1cbiAgICAgIDogbWFya2Vycy5lbXB0eSxcbiAgICBtYXJrZXJzLm5vQnJlYWssXG4gICAgJygnLFxuICAgIHByaW50Q29tbWFTZXBhcmF0ZWROb2RlcyhwcmludCwgbm9kZS5wYXJhbXMpLFxuICAgICcpJyxcbiAgICBub2RlLnJldHVyblR5cGUgPyBwcmludChub2RlLnJldHVyblR5cGUpIDogbWFya2Vycy5lbXB0eSxcbiAgICBtYXJrZXJzLnNwYWNlLFxuICAgIHByaW50KG5vZGUuYm9keSksXG4gICAgLy8gVGhpcyBpcyB0byBzcXVhc2ggYW55IGJyZWFrcyBmcm9tIHRoZSBib2R5LlxuICAgIG1hcmtlcnMubm9CcmVhayxcbiAgICAnJyxcbiAgXSk7XG5cbiAgcmV0dXJuIHdyYXAocGFydHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHByaW50RnVuY3Rpb25FeHByZXNzaW9uO1xuIl19