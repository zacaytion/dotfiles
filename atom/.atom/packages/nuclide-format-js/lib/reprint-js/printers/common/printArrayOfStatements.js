function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 *
 * 
 */

var _utilsFlatten = require('../../utils/flatten');

var _utilsFlatten2 = _interopRequireDefault(_utilsFlatten);

var _constantsMarkers = require('../../constants/markers');

var _constantsMarkers2 = _interopRequireDefault(_constantsMarkers);

function printArrayOfStatements(print, nodes) {
  return (0, _utilsFlatten2['default'])(nodes.map(function (node, i, arr) {
    var parts = [];
    /**
     * Basic description of algorithm:
     *
     *   - If it is the first node, no extra new line
     *   - If it has a leading comment prefix it with extra new line
     *   - If it is a for/while/if/etc prefix it with extra new line
     *   - If previous node is a for/while/if/etc prefix it with extra new line
     */
    if (i > 0) {
      if (hasAttachedLeadingComments(node) || shouldSurroundWithBreaks(node) || shouldSurroundWithBreaks(arr[i - 1])) {
        parts = parts.concat([_constantsMarkers2['default'].noBreak, '', _constantsMarkers2['default'].multiHardBreak, _constantsMarkers2['default'].multiHardBreak]);
      }
    }

    parts = parts.concat(print(node));

    if (i < arr.length) {
      parts = parts.concat([_constantsMarkers2['default'].hardBreak]);
    }

    return parts;
  }));
}

function hasAttachedLeadingComments(node) {
  if (!node.leadingComments || node.leadingComments.length === 0) {
    return false;
  }
  var last = node.leadingComments[node.leadingComments.length - 1];
  return node.loc.start.line - last.loc.end.line <= 1;
}

function shouldSurroundWithBreaks(node) {
  return(
    // Literal statements like: 'use strict';
    node.type === 'ExpressionStatement' && node.expression && node.expression.type === 'Literal' ||

    // Immediately Invoked Function Expression (IIFE).
    node.type === 'ExpressionStatement' && node.expression && node.expression.type === 'CallExpression' && node.expression.callee && node.expression.callee.type === 'FunctionExpression' || node.type === 'BlockStatement' || node.type === 'ClassDeclaration' || node.type === 'DoWhileStatement' || node.type === 'ForInStatement' || node.type === 'ForOfStatement' || node.type === 'ForStatement' || node.type === 'FunctionDeclaration' || node.type === 'IfStatement' || node.type === 'LabeledStatement' || node.type === 'MethodDefinition' || node.type === 'SwitchStatement' || node.type === 'TryStatement' || node.type === 'WhileStatement' || node.type === 'WithStatement'
  );
}

module.exports = printArrayOfStatements;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9yZXByaW50LWpzL3ByaW50ZXJzL2NvbW1vbi9wcmludEFycmF5T2ZTdGF0ZW1lbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs0QkFZb0IscUJBQXFCOzs7O2dDQUNyQix5QkFBeUI7Ozs7QUFFN0MsU0FBUyxzQkFBc0IsQ0FBQyxLQUFZLEVBQUUsS0FBaUIsRUFBUztBQUN0RSxTQUFPLCtCQUFRLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBSztBQUN6QyxRQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7Ozs7Ozs7OztBQVNmLFFBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNULFVBQ0UsMEJBQTBCLENBQUMsSUFBSSxDQUFDLElBQ2hDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUM5Qix3QkFBd0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQ3BDO0FBQ0EsYUFBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FDbkIsOEJBQVEsT0FBTyxFQUNmLEVBQUUsRUFDRiw4QkFBUSxjQUFjLEVBQ3RCLDhCQUFRLGNBQWMsQ0FDdkIsQ0FBQyxDQUFDO09BQ0o7S0FDRjs7QUFFRCxTQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs7QUFFbEMsUUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRTtBQUNsQixXQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLDhCQUFRLFNBQVMsQ0FBQyxDQUFDLENBQUM7S0FDM0M7O0FBRUQsV0FBTyxLQUFLLENBQUM7R0FDZCxDQUFDLENBQUMsQ0FBQztDQUNMOztBQUVELFNBQVMsMEJBQTBCLENBQUMsSUFBUyxFQUFXO0FBQ3RELE1BQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUM5RCxXQUFPLEtBQUssQ0FBQztHQUNkO0FBQ0QsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNuRSxTQUFPLEFBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSyxDQUFDLENBQUM7Q0FDdkQ7O0FBRUQsU0FBUyx3QkFBd0IsQ0FBQyxJQUFTLEVBQVc7QUFDcEQ7O0FBRUUsQUFDRSxRQUFJLENBQUMsSUFBSSxLQUFLLHFCQUFxQixJQUNuQyxJQUFJLENBQUMsVUFBVSxJQUNmLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLFNBQVM7OztBQUtsQyxRQUFJLENBQUMsSUFBSSxLQUFLLHFCQUFxQixJQUNuQyxJQUFJLENBQUMsVUFBVSxJQUNmLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLGdCQUFnQixJQUN6QyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sSUFDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLG9CQUFvQixBQUNyRCxJQUVELElBQUksQ0FBQyxJQUFJLEtBQUssZ0JBQWdCLElBQzlCLElBQUksQ0FBQyxJQUFJLEtBQUssa0JBQWtCLElBQ2hDLElBQUksQ0FBQyxJQUFJLEtBQUssa0JBQWtCLElBQ2hDLElBQUksQ0FBQyxJQUFJLEtBQUssZ0JBQWdCLElBQzlCLElBQUksQ0FBQyxJQUFJLEtBQUssZ0JBQWdCLElBQzlCLElBQUksQ0FBQyxJQUFJLEtBQUssY0FBYyxJQUM1QixJQUFJLENBQUMsSUFBSSxLQUFLLHFCQUFxQixJQUNuQyxJQUFJLENBQUMsSUFBSSxLQUFLLGFBQWEsSUFDM0IsSUFBSSxDQUFDLElBQUksS0FBSyxrQkFBa0IsSUFDaEMsSUFBSSxDQUFDLElBQUksS0FBSyxrQkFBa0IsSUFDaEMsSUFBSSxDQUFDLElBQUksS0FBSyxpQkFBaUIsSUFDL0IsSUFBSSxDQUFDLElBQUksS0FBSyxjQUFjLElBQzVCLElBQUksQ0FBQyxJQUFJLEtBQUssZ0JBQWdCLElBQzlCLElBQUksQ0FBQyxJQUFJLEtBQUssZUFBZTtJQUM3QjtDQUNIOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsc0JBQXNCLENBQUMiLCJmaWxlIjoicHJpbnRBcnJheU9mU3RhdGVtZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCB0eXBlIHtMaW5lcywgUHJpbnR9IGZyb20gJy4uLy4uL3R5cGVzL2NvbW1vbic7XG5cbmltcG9ydCBmbGF0dGVuIGZyb20gJy4uLy4uL3V0aWxzL2ZsYXR0ZW4nO1xuaW1wb3J0IG1hcmtlcnMgZnJvbSAnLi4vLi4vY29uc3RhbnRzL21hcmtlcnMnO1xuXG5mdW5jdGlvbiBwcmludEFycmF5T2ZTdGF0ZW1lbnRzKHByaW50OiBQcmludCwgbm9kZXM6IEFycmF5PGFueT4pOiBMaW5lcyB7XG4gIHJldHVybiBmbGF0dGVuKG5vZGVzLm1hcCgobm9kZSwgaSwgYXJyKSA9PiB7XG4gICAgbGV0IHBhcnRzID0gW107XG4gICAgLyoqXG4gICAgICogQmFzaWMgZGVzY3JpcHRpb24gb2YgYWxnb3JpdGhtOlxuICAgICAqXG4gICAgICogICAtIElmIGl0IGlzIHRoZSBmaXJzdCBub2RlLCBubyBleHRyYSBuZXcgbGluZVxuICAgICAqICAgLSBJZiBpdCBoYXMgYSBsZWFkaW5nIGNvbW1lbnQgcHJlZml4IGl0IHdpdGggZXh0cmEgbmV3IGxpbmVcbiAgICAgKiAgIC0gSWYgaXQgaXMgYSBmb3Ivd2hpbGUvaWYvZXRjIHByZWZpeCBpdCB3aXRoIGV4dHJhIG5ldyBsaW5lXG4gICAgICogICAtIElmIHByZXZpb3VzIG5vZGUgaXMgYSBmb3Ivd2hpbGUvaWYvZXRjIHByZWZpeCBpdCB3aXRoIGV4dHJhIG5ldyBsaW5lXG4gICAgICovXG4gICAgaWYgKGkgPiAwKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGhhc0F0dGFjaGVkTGVhZGluZ0NvbW1lbnRzKG5vZGUpIHx8XG4gICAgICAgIHNob3VsZFN1cnJvdW5kV2l0aEJyZWFrcyhub2RlKSB8fFxuICAgICAgICBzaG91bGRTdXJyb3VuZFdpdGhCcmVha3MoYXJyW2kgLSAxXSlcbiAgICAgICkge1xuICAgICAgICBwYXJ0cyA9IHBhcnRzLmNvbmNhdChbXG4gICAgICAgICAgbWFya2Vycy5ub0JyZWFrLFxuICAgICAgICAgICcnLFxuICAgICAgICAgIG1hcmtlcnMubXVsdGlIYXJkQnJlYWssXG4gICAgICAgICAgbWFya2Vycy5tdWx0aUhhcmRCcmVhayxcbiAgICAgICAgXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGFydHMgPSBwYXJ0cy5jb25jYXQocHJpbnQobm9kZSkpO1xuXG4gICAgaWYgKGkgPCBhcnIubGVuZ3RoKSB7XG4gICAgICBwYXJ0cyA9IHBhcnRzLmNvbmNhdChbbWFya2Vycy5oYXJkQnJlYWtdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFydHM7XG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gaGFzQXR0YWNoZWRMZWFkaW5nQ29tbWVudHMobm9kZTogYW55KTogYm9vbGVhbiB7XG4gIGlmICghbm9kZS5sZWFkaW5nQ29tbWVudHMgfHwgbm9kZS5sZWFkaW5nQ29tbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGxhc3QgPSBub2RlLmxlYWRpbmdDb21tZW50c1tub2RlLmxlYWRpbmdDb21tZW50cy5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIChub2RlLmxvYy5zdGFydC5saW5lIC0gbGFzdC5sb2MuZW5kLmxpbmUpIDw9IDE7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFN1cnJvdW5kV2l0aEJyZWFrcyhub2RlOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIChcbiAgICAvLyBMaXRlcmFsIHN0YXRlbWVudHMgbGlrZTogJ3VzZSBzdHJpY3QnO1xuICAgIChcbiAgICAgIG5vZGUudHlwZSA9PT0gJ0V4cHJlc3Npb25TdGF0ZW1lbnQnICYmXG4gICAgICBub2RlLmV4cHJlc3Npb24gJiZcbiAgICAgIG5vZGUuZXhwcmVzc2lvbi50eXBlID09PSAnTGl0ZXJhbCdcbiAgICApIHx8XG5cbiAgICAvLyBJbW1lZGlhdGVseSBJbnZva2VkIEZ1bmN0aW9uIEV4cHJlc3Npb24gKElJRkUpLlxuICAgIChcbiAgICAgIG5vZGUudHlwZSA9PT0gJ0V4cHJlc3Npb25TdGF0ZW1lbnQnICYmXG4gICAgICBub2RlLmV4cHJlc3Npb24gJiZcbiAgICAgIG5vZGUuZXhwcmVzc2lvbi50eXBlID09PSAnQ2FsbEV4cHJlc3Npb24nICYmXG4gICAgICBub2RlLmV4cHJlc3Npb24uY2FsbGVlICYmXG4gICAgICBub2RlLmV4cHJlc3Npb24uY2FsbGVlLnR5cGUgPT09ICdGdW5jdGlvbkV4cHJlc3Npb24nXG4gICAgKSB8fFxuXG4gICAgbm9kZS50eXBlID09PSAnQmxvY2tTdGF0ZW1lbnQnIHx8XG4gICAgbm9kZS50eXBlID09PSAnQ2xhc3NEZWNsYXJhdGlvbicgfHxcbiAgICBub2RlLnR5cGUgPT09ICdEb1doaWxlU3RhdGVtZW50JyB8fFxuICAgIG5vZGUudHlwZSA9PT0gJ0ZvckluU3RhdGVtZW50JyB8fFxuICAgIG5vZGUudHlwZSA9PT0gJ0Zvck9mU3RhdGVtZW50JyB8fFxuICAgIG5vZGUudHlwZSA9PT0gJ0ZvclN0YXRlbWVudCcgfHxcbiAgICBub2RlLnR5cGUgPT09ICdGdW5jdGlvbkRlY2xhcmF0aW9uJyB8fFxuICAgIG5vZGUudHlwZSA9PT0gJ0lmU3RhdGVtZW50JyB8fFxuICAgIG5vZGUudHlwZSA9PT0gJ0xhYmVsZWRTdGF0ZW1lbnQnIHx8XG4gICAgbm9kZS50eXBlID09PSAnTWV0aG9kRGVmaW5pdGlvbicgfHxcbiAgICBub2RlLnR5cGUgPT09ICdTd2l0Y2hTdGF0ZW1lbnQnIHx8XG4gICAgbm9kZS50eXBlID09PSAnVHJ5U3RhdGVtZW50JyB8fFxuICAgIG5vZGUudHlwZSA9PT0gJ1doaWxlU3RhdGVtZW50JyB8fFxuICAgIG5vZGUudHlwZSA9PT0gJ1dpdGhTdGF0ZW1lbnQnXG4gICk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJpbnRBcnJheU9mU3RhdGVtZW50cztcbiJdfQ==