Object.defineProperty(exports, '__esModule', {
  value: true
});
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 *
 * 
 */

/* globals atom */

exports.activate = activate;
exports.deactivate = deactivate;

var _atom = require('atom');

var subscriptions = null;

function activate(state) {
  if (subscriptions) {
    return;
  }

  var formatCode = require('./formatCode');

  var _require = require('./settings');

  var calculateOptions = _require.calculateOptions;
  var observeSettings = _require.observeSettings;

  var localSubscriptions = new _atom.CompositeDisposable();
  localSubscriptions.add(atom.commands.add('atom-text-editor', 'nuclide-format-js:format',
  // Atom prevents in-command modification to text editor content.
  function () {
    return process.nextTick(function () {
      return formatCode(options);
    });
  }));

  // Keep settings up to date with Nuclide config and precalculate options.
  var settings = undefined;
  var options = undefined;
  localSubscriptions.add(observeSettings(function (newSettings) {
    settings = newSettings;
    options = calculateOptions(settings);
  }));

  // Format code on save if settings say so
  localSubscriptions.add(atom.workspace.observeTextEditors(function (editor) {
    localSubscriptions.add(editor.onDidSave(function () {
      if (settings.runOnSave) {
        process.nextTick(function () {
          return formatCode(options, editor);
        });
      }
    }));
  }));

  // Work around flow refinements.
  subscriptions = localSubscriptions;
}

function deactivate() {
  if (subscriptions) {
    subscriptions.dispose();
    subscriptions = null;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hdG9tL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFla0MsTUFBTTs7QUFFeEMsSUFBSSxhQUFtQyxHQUFHLElBQUksQ0FBQzs7QUFFeEMsU0FBUyxRQUFRLENBQUMsS0FBYyxFQUFRO0FBQzdDLE1BQUksYUFBYSxFQUFFO0FBQ2pCLFdBQU87R0FDUjs7QUFFRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7O2lCQUNDLE9BQU8sQ0FBQyxZQUFZLENBQUM7O01BQTFELGdCQUFnQixZQUFoQixnQkFBZ0I7TUFBRSxlQUFlLFlBQWYsZUFBZTs7QUFFeEMsTUFBTSxrQkFBa0IsR0FBRywrQkFBeUIsQ0FBQztBQUNyRCxvQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQ3RDLGtCQUFrQixFQUNsQiwwQkFBMEI7O0FBRTFCO1dBQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQzthQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUM7S0FBQSxDQUFDO0dBQUEsQ0FDbEQsQ0FBQyxDQUFDOzs7QUFHSCxNQUFJLFFBQWtCLFlBQUEsQ0FBQztBQUN2QixNQUFJLE9BQXNCLFlBQUEsQ0FBQztBQUMzQixvQkFBa0IsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLFVBQUEsV0FBVyxFQUFJO0FBQ3BELFlBQVEsR0FBRyxXQUFXLENBQUM7QUFDdkIsV0FBTyxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQ3RDLENBQUMsQ0FBQyxDQUFDOzs7QUFHSixvQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxVQUFBLE1BQU0sRUFBSTtBQUNqRSxzQkFBa0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxZQUFNO0FBQzVDLFVBQUksUUFBUSxDQUFDLFNBQVMsRUFBRTtBQUN0QixlQUFPLENBQUMsUUFBUSxDQUFDO2lCQUFNLFVBQVUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDO1NBQUEsQ0FBQyxDQUFDO09BQ3JEO0tBQ0YsQ0FBQyxDQUFDLENBQUM7R0FDTCxDQUFDLENBQUMsQ0FBQzs7O0FBR0osZUFBYSxHQUFHLGtCQUFrQixDQUFDO0NBQ3BDOztBQUVNLFNBQVMsVUFBVSxHQUFTO0FBQ2pDLE1BQUksYUFBYSxFQUFFO0FBQ2pCLGlCQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDeEIsaUJBQWEsR0FBRyxJQUFJLENBQUM7R0FDdEI7Q0FDRiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8qIGdsb2JhbHMgYXRvbSAqL1xuXG5pbXBvcnQgdHlwZSB7U291cmNlT3B0aW9uc30gZnJvbSAnLi4vY29tbW9uL29wdGlvbnMvU291cmNlT3B0aW9ucyc7XG5pbXBvcnQgdHlwZSB7U2V0dGluZ3N9IGZyb20gJy4vc2V0dGluZ3MnO1xuXG5pbXBvcnQge0NvbXBvc2l0ZURpc3Bvc2FibGV9IGZyb20gJ2F0b20nO1xuXG5sZXQgc3Vic2NyaXB0aW9uczogP0NvbXBvc2l0ZURpc3Bvc2FibGUgPSBudWxsO1xuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUoc3RhdGU6ID9PYmplY3QpOiB2b2lkIHtcbiAgaWYgKHN1YnNjcmlwdGlvbnMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBmb3JtYXRDb2RlID0gcmVxdWlyZSgnLi9mb3JtYXRDb2RlJyk7XG4gIGNvbnN0IHtjYWxjdWxhdGVPcHRpb25zLCBvYnNlcnZlU2V0dGluZ3N9ID0gcmVxdWlyZSgnLi9zZXR0aW5ncycpO1xuXG4gIGNvbnN0IGxvY2FsU3Vic2NyaXB0aW9ucyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKCk7XG4gIGxvY2FsU3Vic2NyaXB0aW9ucy5hZGQoYXRvbS5jb21tYW5kcy5hZGQoXG4gICAgJ2F0b20tdGV4dC1lZGl0b3InLFxuICAgICdudWNsaWRlLWZvcm1hdC1qczpmb3JtYXQnLFxuICAgIC8vIEF0b20gcHJldmVudHMgaW4tY29tbWFuZCBtb2RpZmljYXRpb24gdG8gdGV4dCBlZGl0b3IgY29udGVudC5cbiAgICAoKSA9PiBwcm9jZXNzLm5leHRUaWNrKCgpID0+IGZvcm1hdENvZGUob3B0aW9ucykpLFxuICApKTtcblxuICAvLyBLZWVwIHNldHRpbmdzIHVwIHRvIGRhdGUgd2l0aCBOdWNsaWRlIGNvbmZpZyBhbmQgcHJlY2FsY3VsYXRlIG9wdGlvbnMuXG4gIGxldCBzZXR0aW5nczogU2V0dGluZ3M7XG4gIGxldCBvcHRpb25zOiBTb3VyY2VPcHRpb25zO1xuICBsb2NhbFN1YnNjcmlwdGlvbnMuYWRkKG9ic2VydmVTZXR0aW5ncyhuZXdTZXR0aW5ncyA9PiB7XG4gICAgc2V0dGluZ3MgPSBuZXdTZXR0aW5ncztcbiAgICBvcHRpb25zID0gY2FsY3VsYXRlT3B0aW9ucyhzZXR0aW5ncyk7XG4gIH0pKTtcblxuICAvLyBGb3JtYXQgY29kZSBvbiBzYXZlIGlmIHNldHRpbmdzIHNheSBzb1xuICBsb2NhbFN1YnNjcmlwdGlvbnMuYWRkKGF0b20ud29ya3NwYWNlLm9ic2VydmVUZXh0RWRpdG9ycyhlZGl0b3IgPT4ge1xuICAgIGxvY2FsU3Vic2NyaXB0aW9ucy5hZGQoZWRpdG9yLm9uRGlkU2F2ZSgoKSA9PiB7XG4gICAgICBpZiAoc2V0dGluZ3MucnVuT25TYXZlKSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gZm9ybWF0Q29kZShvcHRpb25zLCBlZGl0b3IpKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gIH0pKTtcblxuICAvLyBXb3JrIGFyb3VuZCBmbG93IHJlZmluZW1lbnRzLlxuICBzdWJzY3JpcHRpb25zID0gbG9jYWxTdWJzY3JpcHRpb25zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVhY3RpdmF0ZSgpOiB2b2lkIHtcbiAgaWYgKHN1YnNjcmlwdGlvbnMpIHtcbiAgICBzdWJzY3JpcHRpb25zLmRpc3Bvc2UoKTtcbiAgICBzdWJzY3JpcHRpb25zID0gbnVsbDtcbiAgfVxufVxuIl19