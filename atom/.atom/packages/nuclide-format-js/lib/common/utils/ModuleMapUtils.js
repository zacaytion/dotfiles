function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 *
 * 
 */

var _StringUtils = require('./StringUtils');

var _StringUtils2 = _interopRequireDefault(_StringUtils);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function getIdentifiersFromPath(filePath) {
  var ids = new Set();

  var baseName = _path2['default'].basename(filePath);

  // Get rid of extensions like, '.js', '.jsx', '.react.js', etc.
  var noExtensions = baseName.split('.')[0];

  // These are not valid tokens in an identifier so we have to remove them.
  var splits = noExtensions.split(/[^\w]/);

  // Just a standard identifier.
  ids.add(splits.join(''));

  // Then a camel case identifier (or possibly title case based on file name).
  var camelCaseSplits = [splits[0]];
  for (var i = 1; i < splits.length; i++) {
    camelCaseSplits.push(_StringUtils2['default'].capitalize(splits[i]));
  }
  ids.add(camelCaseSplits.join(''));

  return ids;
}

function getLiteralFromPath(filePath) {
  var baseName = _path2['default'].basename(filePath);
  return removeFileType(baseName);
}

function relativizeForRequire(sourcePath, destPath) {
  var relativePath = _path2['default'].relative(_path2['default'].dirname(sourcePath), destPath);
  var noFileType = removeFileType(relativePath);
  return !noFileType.startsWith('.') ? '.' + _path2['default'].sep + noFileType : noFileType;
}

function removeFileType(str) {
  var splits = str.split('.');
  if (splits.length <= 1) {
    return str;
  } else {
    return splits.slice(0, -1).join('.');
  }
}

var ModuleMapUtils = {
  getIdentifiersFromPath: getIdentifiersFromPath,
  getLiteralFromPath: getLiteralFromPath,
  relativizeForRequire: relativizeForRequire
};

module.exports = ModuleMapUtils;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vdXRpbHMvTW9kdWxlTWFwVXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OzJCQVl3QixlQUFlOzs7O29CQUN0QixNQUFNOzs7O0FBRXZCLFNBQVMsc0JBQXNCLENBQUMsUUFBc0IsRUFBbUI7QUFDdkUsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQzs7QUFFdEIsTUFBTSxRQUFRLEdBQUcsa0JBQUssUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7QUFHekMsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7O0FBRzVDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7OztBQUczQyxLQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzs7O0FBR3pCLE1BQU0sZUFBZSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEMsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdEMsbUJBQWUsQ0FBQyxJQUFJLENBQUMseUJBQVksVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDekQ7QUFDRCxLQUFHLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzs7QUFFbEMsU0FBTyxHQUFHLENBQUM7Q0FDWjs7QUFFRCxTQUFTLGtCQUFrQixDQUFDLFFBQXNCLEVBQVc7QUFDM0QsTUFBTSxRQUFRLEdBQUcsa0JBQUssUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3pDLFNBQU8sY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQ2pDOztBQUVELFNBQVMsb0JBQW9CLENBQzNCLFVBQXdCLEVBQ3hCLFFBQXNCLEVBQ1I7QUFDZCxNQUFNLFlBQVksR0FBRyxrQkFBSyxRQUFRLENBQUMsa0JBQUssT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZFLE1BQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNoRCxTQUFPLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FDOUIsR0FBRyxHQUFHLGtCQUFLLEdBQUcsR0FBRyxVQUFVLEdBQzNCLFVBQVUsQ0FBQztDQUNoQjs7QUFFRCxTQUFTLGNBQWMsQ0FBQyxHQUFXLEVBQVU7QUFDM0MsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM5QixNQUFJLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO0FBQ3RCLFdBQU8sR0FBRyxDQUFDO0dBQ1osTUFBTTtBQUNMLFdBQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDdEM7Q0FDRjs7QUFFRCxJQUFNLGNBQWMsR0FBRztBQUNyQix3QkFBc0IsRUFBdEIsc0JBQXNCO0FBQ3RCLG9CQUFrQixFQUFsQixrQkFBa0I7QUFDbEIsc0JBQW9CLEVBQXBCLG9CQUFvQjtDQUNyQixDQUFDOztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsY0FBYyxDQUFDIiwiZmlsZSI6Ik1vZHVsZU1hcFV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHR5cGUge0Fic29sdXRlUGF0aCwgSWRlbnRpZmllciwgTGl0ZXJhbCwgUmVsYXRpdmVQYXRofSBmcm9tICcuLi90eXBlcy9jb21tb24nO1xuXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSAnLi9TdHJpbmdVdGlscyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuZnVuY3Rpb24gZ2V0SWRlbnRpZmllcnNGcm9tUGF0aChmaWxlUGF0aDogQWJzb2x1dGVQYXRoKTogU2V0PElkZW50aWZpZXI+IHtcbiAgY29uc3QgaWRzID0gbmV3IFNldCgpO1xuXG4gIGNvbnN0IGJhc2VOYW1lID0gcGF0aC5iYXNlbmFtZShmaWxlUGF0aCk7XG5cbiAgLy8gR2V0IHJpZCBvZiBleHRlbnNpb25zIGxpa2UsICcuanMnLCAnLmpzeCcsICcucmVhY3QuanMnLCBldGMuXG4gIGNvbnN0IG5vRXh0ZW5zaW9ucyA9IGJhc2VOYW1lLnNwbGl0KCcuJylbMF07XG5cbiAgLy8gVGhlc2UgYXJlIG5vdCB2YWxpZCB0b2tlbnMgaW4gYW4gaWRlbnRpZmllciBzbyB3ZSBoYXZlIHRvIHJlbW92ZSB0aGVtLlxuICBjb25zdCBzcGxpdHMgPSBub0V4dGVuc2lvbnMuc3BsaXQoL1teXFx3XS8pO1xuXG4gIC8vIEp1c3QgYSBzdGFuZGFyZCBpZGVudGlmaWVyLlxuICBpZHMuYWRkKHNwbGl0cy5qb2luKCcnKSk7XG5cbiAgLy8gVGhlbiBhIGNhbWVsIGNhc2UgaWRlbnRpZmllciAob3IgcG9zc2libHkgdGl0bGUgY2FzZSBiYXNlZCBvbiBmaWxlIG5hbWUpLlxuICBjb25zdCBjYW1lbENhc2VTcGxpdHMgPSBbc3BsaXRzWzBdXTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBzcGxpdHMubGVuZ3RoOyBpKyspIHtcbiAgICBjYW1lbENhc2VTcGxpdHMucHVzaChTdHJpbmdVdGlscy5jYXBpdGFsaXplKHNwbGl0c1tpXSkpO1xuICB9XG4gIGlkcy5hZGQoY2FtZWxDYXNlU3BsaXRzLmpvaW4oJycpKTtcblxuICByZXR1cm4gaWRzO1xufVxuXG5mdW5jdGlvbiBnZXRMaXRlcmFsRnJvbVBhdGgoZmlsZVBhdGg6IEFic29sdXRlUGF0aCk6IExpdGVyYWwge1xuICBjb25zdCBiYXNlTmFtZSA9IHBhdGguYmFzZW5hbWUoZmlsZVBhdGgpO1xuICByZXR1cm4gcmVtb3ZlRmlsZVR5cGUoYmFzZU5hbWUpO1xufVxuXG5mdW5jdGlvbiByZWxhdGl2aXplRm9yUmVxdWlyZShcbiAgc291cmNlUGF0aDogQWJzb2x1dGVQYXRoLFxuICBkZXN0UGF0aDogQWJzb2x1dGVQYXRoLFxuKTogUmVsYXRpdmVQYXRoIHtcbiAgY29uc3QgcmVsYXRpdmVQYXRoID0gcGF0aC5yZWxhdGl2ZShwYXRoLmRpcm5hbWUoc291cmNlUGF0aCksIGRlc3RQYXRoKTtcbiAgY29uc3Qgbm9GaWxlVHlwZSA9IHJlbW92ZUZpbGVUeXBlKHJlbGF0aXZlUGF0aCk7XG4gIHJldHVybiAhbm9GaWxlVHlwZS5zdGFydHNXaXRoKCcuJylcbiAgICA/ICcuJyArIHBhdGguc2VwICsgbm9GaWxlVHlwZVxuICAgIDogbm9GaWxlVHlwZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRmlsZVR5cGUoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBzcGxpdHMgPSBzdHIuc3BsaXQoJy4nKTtcbiAgaWYgKHNwbGl0cy5sZW5ndGggPD0gMSkge1xuICAgIHJldHVybiBzdHI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNwbGl0cy5zbGljZSgwLCAtMSkuam9pbignLicpO1xuICB9XG59XG5cbmNvbnN0IE1vZHVsZU1hcFV0aWxzID0ge1xuICBnZXRJZGVudGlmaWVyc0Zyb21QYXRoLFxuICBnZXRMaXRlcmFsRnJvbVBhdGgsXG4gIHJlbGF0aXZpemVGb3JSZXF1aXJlLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb2R1bGVNYXBVdGlscztcbiJdfQ==